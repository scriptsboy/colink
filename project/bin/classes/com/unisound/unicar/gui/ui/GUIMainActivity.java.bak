package com.unisound.unicar.gui.ui;

import java.util.ArrayList;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.media.AudioManager;
import android.net.ConnectivityManager;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import cn.yunzhisheng.vui.assistant.WindowService;

import com.baidu.mapapi.SDKInitializer;
import com.coogo.inet.vui.assistant.car.R;
import com.unisound.unicar.gui.utils.AutoHelpTextUpdateUtil;
import com.unisound.unicar.gui.utils.FunctionHelpUtil;
import com.unisound.unicar.gui.utils.Logger;
import com.unisound.unicar.gui.utils.Network;
import com.unisound.unicar.gui.view.AutoTextView;

@SuppressLint("NewApi")
public class GUIMainActivity extends Activity implements OnClickListener {
	private final static String TAG = GUIMainActivity.class.getSimpleName();
	
	private Context mContext;
	
	private ImageView startSpeak;
	private AutoTextView mAutoTextView;

	private ArrayList<View> mViewList = new ArrayList<View>();
	private LayoutInflater mLayoutInflater;
	private ViewGroup indicatorViewGroup;

	private ImageView mImageView;
	private ImageView[] mImageViews;
	private ViewPager mViewPager;

    public static final String ACTION_FINISH_GUIMAINACTIVITY = "com.unisound.unicar.gui.ACTION_FINISH_GUIMAINACTIVITY";
    
	public static final int MSG_UPDATE_AUTO_TEXT_VIEW = 1001;
	private ArrayList<String> mHelpTextList = new ArrayList<String>();
	private AutoHelpTextUpdateUtil mHelpTextUpdateMgr = null;

	/**
	 * 
	 */
	private void initMainHeadView(){
		startSpeak = (ImageView) findViewById(R.id.startSpeak);
		startSpeak.setOnClickListener(this);
		
		mAutoTextView = (AutoTextView) findViewById(R.id.tvAutoText);
		//mAutoTextView.setText("V"+DeviceTool.getAppVersionName(this));
		updateHelpText(Network.isNetworkConnected(mContext));
	}
    
	private void initViewPager() {

		if(mViewList.size() > 0){
			mImageViews = new ImageView[mViewList.size()];
		}

		mViewPager = (ViewPager) findViewById(R.id.pager);
		mViewPager.setAdapter(pagerAdapter);

		indicatorViewGroup = (LinearLayout) findViewById(R.id.viewGroup);

		Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.icon_dot_normal);
		if(mViewList.size() > 0){
			for (int i = 0; i < mViewList.size(); i++) {
				mImageView = new ImageView(GUIMainActivity.this);
				mImageView.setLayoutParams(new LayoutParams(bitmap.getWidth(), bitmap.getHeight()));
				mImageView.setPadding(0, 20, 0, 20);
	
				if (i == 0) {
					mImageView.setBackgroundResource(R.drawable.icon_dot_selected);
				} else {
					mImageView.setBackgroundResource(R.drawable.icon_dot_normal);
				}
				mImageViews[i] = mImageView;
				indicatorViewGroup.addView(mImageViews[i]);
			}
		}
		bitmap.recycle();
		mViewPager.setOnPageChangeListener(new OnPageChangeListener() {

			@Override
			public void onPageSelected(int arg0) {
				// TODO Auto-generated method stub

				for (int i = 0; i < mImageViews.length; i++) {
					if (i == arg0) {
						mImageViews[i].setBackgroundResource(R.drawable.icon_dot_selected);
					} else {
						mImageViews[i].setBackgroundResource(R.drawable.icon_dot_normal);
					}
				}
			}

			@Override
			public void onPageScrolled(int arg0, float arg1, int arg2) {
				// TODO Auto-generated method stub
			}

			@Override
			public void onPageScrollStateChanged(int arg0) {
                switch (arg0) {
                case ViewPager.SCROLL_STATE_IDLE:
                	
                    break;
                case ViewPager.SCROLL_STATE_DRAGGING:
                	
                    break;
                }
			}
		});
	}
	
	@Override
	public void onCreate(Bundle savedInstanceState) {
		Logger.d(TAG, "onCreate");
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.activity_start);
//		SDKInitializer.initialize(this.getApplicationContext());
		mLayoutInflater = getLayoutInflater();

		mContext = getApplicationContext();
		initMainHeadView();//XD added 20150722
		
		//add layout
		mViewList.add(mLayoutInflater.inflate(R.layout.pager_layout1, null));
		mViewList.add(mLayoutInflater.inflate(R.layout.pager_layout2, null));
		initViewPager();
		setVolumeControlStream(AudioManager.STREAM_MUSIC);
		
		startWindowService();//xd added 20150706	
		
		IntentFilter filter = new IntentFilter(ACTION_FINISH_GUIMAINACTIVITY);
		registerReceiver(mFinishReceiver, filter);
		//XD 20150722 added
		IntentFilter networkFilter = new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION); 
		registerReceiver(mNetworkStateReceiver, networkFilter);
	}

	/**
	 * start WindowService
	 * xd added 20150706
	 */
	private void startWindowService(){
		Logger.d(TAG, "!--->---startWindowService()-----");
		Intent i = new Intent(this, WindowService.class);
		i.setAction(WindowService.ACTION_START_REQUEST_MAKE_FINISHED);
		startService(i);
	}

	@Override
	public void onClick(View v) {
		int key = v.getId();
		switch (key) {
		case R.id.startSpeak:			
			startTalk();
			break;
		default:
			break;
		}
	}

	private void startTalk() {
		Logger.d(TAG, "!--->startTalk----");
		Intent intent = new Intent(this, WindowService.class);
		intent.setAction(MessageReceiver.ACTION_START_TALK);
		startService(intent);
	}

	private void startCallOut(){
		Logger.d(TAG, "!--->startCallOut----");
		Intent intent = new Intent(this, WindowService.class);
		intent.setAction(MessageReceiver.ACTION_START_CALL_OUT);
		startService(intent);
	}
	
	private void startNavigation(){
		Logger.d(TAG, "!--->startNavigation----");
		Intent intent = new Intent(this, WindowService.class);
		intent.setAction(MessageReceiver.ACTION_START_NAVIGATION);
		startService(intent);
	}
	
	private void startMusic(){
		Logger.d(TAG, "!--->startNavigation----");
		Intent intent = new Intent(this, WindowService.class);
		intent.setAction(MessageReceiver.ACTION_START_MUSIC);
		startService(intent);
	}
	
	private void startLocalSearch(){
		Logger.d(TAG, "!--->startLocalSearch----");
		Intent intent = new Intent(this, WindowService.class);
		intent.setAction(MessageReceiver.ACTION_START_LOCAL_SEARCH);
		startService(intent);
	}
	
	private OnClickListener mOnClickListener = new OnClickListener() {

		@Override
		public void onClick(View v) {
			// TODO Auto-generated method stub
			switch (v.getId()) {
			case R.id.bluetooth:
				Logger.d(TAG, "bluetooth button onclicked");
				startCallOut();
				//startHelpScreen(0);
				break;

			case R.id.music:
				Logger.d(TAG, "music button onclicked");
				startMusic();
				//startHelpScreen(1);
				break;

//			case R.id.radio:
//				Logger.d(TAG, "broadcast button onclicked");
//				startHelpScreen(2);
//				break;

			case R.id.poi:
				Logger.d(TAG, "poi button onclicked");
				startNavigation();
				//startHelpScreen(3);
				break;
				
			case R.id.main_local_search:
				Logger.d(TAG, "incity search button onclicked");
				startLocalSearch();
				break;

			case R.id.setting:
				Logger.d(TAG, "setting button onclicked");
				Intent settingIntent = new Intent(GUIMainActivity.this, SettingsViewPagerActivity.class);
				startActivity(settingIntent);
				//startHelpScreen(4);
				break;

//			case R.id.weather:
//				Logger.d(TAG, "weather button onclicked");
//				startHelpScreen(5);
//				break;
//			case R.id.stock:
//				Logger.d(TAG, "stock button onclicked");
//				startHelpScreen(6);
//				break;
				
			case R.id.main_all_function:
				Logger.d(TAG, "!--->main_all_function button onclicked");
				Intent functionIntent = new Intent(GUIMainActivity.this, AllFunctionsActivity.class);
				startActivity(functionIntent);
				break;
			default:
				break;
			}
		}
	};

	PagerAdapter pagerAdapter = new PagerAdapter() {

		@Override
		public int getCount() {
			return mViewList.size();
		}

		@Override
		public Object instantiateItem(View container, int position) {
			/*< XiaoDong 20150721 added begin*/
			int childCount = ((ViewPager) container).getChildCount();
			if (mViewList == null){
				Logger.e(TAG, "!--->PagerAdapter instantiateItem error, mViewList is null.");
				return null;
			}
			if(null != mViewList && mViewList.size() < position){
				Logger.e(TAG, "!--->PagerAdapter instantiateItem error, return null. ViewList size = "+mViewList.size()+"; position = "+position);
				return null;
			}
			Logger.d(TAG, "!--->PagerAdapter--position:"+position+"; childCount:"+childCount+"; mViewList.size:" + mViewList.size());
			/* XiaoDong 20150721 added End >*/
			switch (position) {
			case 0:
				((ViewPager) container).addView(mViewList.get(position), 0);
				FrameLayout bluetooth = (FrameLayout) findViewById(R.id.bluetooth);
				FrameLayout poi = (FrameLayout) findViewById(R.id.poi);
				FrameLayout music = (FrameLayout) findViewById(R.id.music);
				FrameLayout incitySearch = (FrameLayout) findViewById(R.id.main_local_search);
				
				bluetooth.setOnClickListener(mOnClickListener);
				poi.setOnClickListener(mOnClickListener);
				music.setOnClickListener(mOnClickListener);
				incitySearch.setOnClickListener(mOnClickListener);
				break;
			case 1:
				/*< XiaoDong 20150721 added Begin */
				if(childCount == 0){
					Logger.w(TAG, "!--->position is 1 but childCount is 0");
					((ViewPager) container).addView(mViewList.get(position), 0);
				}
				/* XiaoDong 20150721 added End >*/
				
				((ViewPager) container).addView(mViewList.get(position), 1);
				FrameLayout setting = (FrameLayout) findViewById(R.id.setting);
				setting.setOnClickListener(mOnClickListener);
				FrameLayout allFunction = (FrameLayout) findViewById(R.id.main_all_function);
				allFunction.setOnClickListener(mOnClickListener);
				break;
			}
			return mViewList.get(position);
		}

		@Override
		public void destroyItem(View container, int position, Object object) {
			Logger.d(TAG, "destroyItem-----position = "+position);
			if(mViewList != null && mViewList.size() > 0 && mViewList.size() >= position){
				Logger.d(TAG, "!--->destroyItem---mViewList size"+mViewList.size());
				((ViewPager) container).removeView(mViewList.get(position));
			}
		}

		@Override
		public boolean isViewFromObject(View arg0, Object arg1) {
			return arg0 == arg1;
		}

	};
	
	private void startHelpScreen(int position){
        Intent intent = new Intent(this, HelpActivity.class);
        intent.putExtra("position", position);
        startActivity(intent);
	}
	
	
	/**
	 * 
	 */
	BroadcastReceiver mFinishReceiver = new BroadcastReceiver() {
		
		@Override
		public void onReceive(Context context, Intent intent) {
			String action = intent.getAction();
			Logger.d(TAG, "!--->mFinishReceiver action = "+action);
			if(ACTION_FINISH_GUIMAINACTIVITY.equals(action)){
				//startMainActivity(); //xd delete 20150706
				GUIMainActivity.this.finish();
			}
		}
	};
	
	@Override
	public boolean dispatchKeyEvent(KeyEvent event) {
		// TODO Auto-generated method stub
		Logger.d(TAG, "!--->dispatchKeyEvent()-------getKeyCode =" + event.getKeyCode());
		if (event.getKeyCode() == KeyEvent.KEYCODE_BACK) {
			//this.finish();
		}
		return super.dispatchKeyEvent(event);
	}
	
	@Override
	protected void onResume() {
		super.onResume();
		Logger.d(TAG, "!--->onResume...");
		if (mContext == null) {
			mContext = getApplicationContext();
			Logger.d(TAG, "mContext = "+mContext);
		}
	}
	
	@Override
	protected void onPause() {
		super.onPause();
		Logger.d(TAG, "!--->onPause...");
		
	}
	
	/*< XiaodDong 20150721 added for Auto Help Text Begin */
	private Handler mUIHandler = new Handler(){
		public void handleMessage(android.os.Message msg) {
			switch (msg.what) {
			case MSG_UPDATE_AUTO_TEXT_VIEW:
				String text = (String) msg.obj;
				//Logger.d(TAG, "!--->MSG_UPDATE_AUTO_TEXT_VIEW---text = "+text);
				if (null != mAutoTextView) {
					mAutoTextView.setText(text);
				}
				break;
			default:
				break;
			}
		};
	};
	
	/**
	 * update Help Text
	 * @param isConnected
	 */
	private void updateHelpText(boolean isConnected){
		mHelpTextList = FunctionHelpUtil.getMainPageHelpTextList(mContext, isConnected);
		Logger.d(TAG, "!--->updateHelpText---isConnected = "+isConnected+"; mHelpTextList size = "+mHelpTextList.size());
		if(null == mHelpTextUpdateMgr){
			  mHelpTextUpdateMgr = new AutoHelpTextUpdateUtil(mHelpTextList, mUIHandler);
		} else {
			Logger.d(TAG, "!--->mUpdateHelpTextThread interrupt.");
			mHelpTextUpdateMgr.stop();
			mHelpTextUpdateMgr.setHelpTextList(mHelpTextList);
		}
		mHelpTextUpdateMgr.start();
	}

	/**
	 * 
	 */
	private BroadcastReceiver mNetworkStateReceiver = new BroadcastReceiver(){
		@Override
		public void onReceive(Context context, Intent intent) {
			if (ConnectivityManager.CONNECTIVITY_ACTION.equals(intent.getAction())) {
				boolean isConnected = Network.isNetworkConnected(mContext);
				Logger.d(TAG, "!--->mNetworkStateReceiver--onReceive--isConnected:"+isConnected);
				updateHelpText(isConnected);
			}
		}
	};
	/* XiaodDong 20150721 added for Auto Help Text End */
	

	@Override
	protected void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
		Logger.d(TAG, "!--->onDestroy...");
		
		if(null != mHelpTextUpdateMgr){
			mHelpTextUpdateMgr.stop();
			mHelpTextUpdateMgr.setHelpTextList(null);
			mHelpTextUpdateMgr = null;
		}
		if (null != mHelpTextList){
			mHelpTextList.clear();
		}
		unregisterReceiver(mFinishReceiver);
		unregisterReceiver(mNetworkStateReceiver);//XD added 20150722
	}

}